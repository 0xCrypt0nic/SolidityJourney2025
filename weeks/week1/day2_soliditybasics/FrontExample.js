// How to access to our contract
var abi = ""; /* abi generated by compiler */
var ZombieFactoryContract = web3.eth.contract(abi);
var contractAddress = ""; /* address of deployed contract */
var ZombieFactory = ZombieFactoryContract.at(contractAddress);
// `ZombieFactory` had now access to public methods / function of our contract.

// Listener for the name textbox
$("#ourButton").click(function (e) {
  var name = $("#nameInput").val();

  // Call our createRandomZombie method.
  ZombieFactory.createRandomZombie(name);
});

// Listen the NewZombie event of our contract to update the front.
var event = ZombieFactory.NewZombie(function (error, result) {
  if (error) return;
  generateZombie(result.zombieId, result.name, result.dna);
});

// Method wich update the picture with from textbox
function generateZombie(id, name, dna) {
  let dnaStr = String(dna);

  // add zero on left side if ADN had less than 16 char.
  while (dnaStr.length < 16) dnaStr = "0" + dnaStr;

  let zombieDetails = {
    // The first 2 digits difine the head. 7 possibilites, so we use %7 to have a number between 0 and 6.
    // Next we added 1 to have number between 1 and 7.
    // And after that, we can create the name of the PNG file dynamicly:
    headChoice: (dnaStr.substring(0, 2) % 7) + 1,

    // 2nd digit define eye, with 11 possibilites:
    eyeChoice: (dnaStr.substring(2, 4) % 11) + 1,

    // 6 variations for shirt.
    shirtChoice: (dnaStr.substring(4, 6) % 6) + 1,

    // last 6 digits is for color, with help of a CSS Filter :
    skinColorChoice: parseInt((dnaStr.substring(6, 8) / 100) * 360),
    eyeColorChoice: parseInt((dnaStr.substring(8, 10) / 100) * 360),
    clothesColorChoice: parseInt((dnaStr.substring(10, 12) / 100) * 360),
    zombieName: name,
    zombieDescription: "A Level 1 CryptoZombie",
  };
  return zombieDetails;
}
